// Autogenerated from Pigeon (v2.0.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.c1yde3.bd_location;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Brigde {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class LocationInfo {
    private @Nullable String province;
    public @Nullable String getProvince() { return province; }
    public void setProvince(@Nullable String setterArg) {
      this.province = setterArg;
    }

    private @Nullable String city;
    public @Nullable String getCity() { return city; }
    public void setCity(@Nullable String setterArg) {
      this.city = setterArg;
    }

    private @Nullable String distinct;
    public @Nullable String getDistinct() { return distinct; }
    public void setDistinct(@Nullable String setterArg) {
      this.distinct = setterArg;
    }

    private @Nullable String adCode;
    public @Nullable String getAdCode() { return adCode; }
    public void setAdCode(@Nullable String setterArg) {
      this.adCode = setterArg;
    }

    public static final class Builder {
      private @Nullable String province;
      public @NonNull Builder setProvince(@Nullable String setterArg) {
        this.province = setterArg;
        return this;
      }
      private @Nullable String city;
      public @NonNull Builder setCity(@Nullable String setterArg) {
        this.city = setterArg;
        return this;
      }
      private @Nullable String distinct;
      public @NonNull Builder setDistinct(@Nullable String setterArg) {
        this.distinct = setterArg;
        return this;
      }
      private @Nullable String adCode;
      public @NonNull Builder setAdCode(@Nullable String setterArg) {
        this.adCode = setterArg;
        return this;
      }
      public @NonNull LocationInfo build() {
        LocationInfo pigeonReturn = new LocationInfo();
        pigeonReturn.setProvince(province);
        pigeonReturn.setCity(city);
        pigeonReturn.setDistinct(distinct);
        pigeonReturn.setAdCode(adCode);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("province", province);
      toMapResult.put("city", city);
      toMapResult.put("distinct", distinct);
      toMapResult.put("adCode", adCode);
      return toMapResult;
    }
    static @NonNull LocationInfo fromMap(@NonNull Map<String, Object> map) {
      LocationInfo pigeonResult = new LocationInfo();
      Object province = map.get("province");
      pigeonResult.setProvince((String)province);
      Object city = map.get("city");
      pigeonResult.setCity((String)city);
      Object distinct = map.get("distinct");
      pigeonResult.setDistinct((String)distinct);
      Object adCode = map.get("adCode");
      pigeonResult.setAdCode((String)adCode);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class BdLocationHostBridgeCodec extends StandardMessageCodec {
    public static final BdLocationHostBridgeCodec INSTANCE = new BdLocationHostBridgeCodec();
    private BdLocationHostBridgeCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return LocationInfo.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof LocationInfo) {
        stream.write(128);
        writeValue(stream, ((LocationInfo) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface BdLocationHostBridge {
    void getLocationInfo(Result<LocationInfo> result);
    void setIOSKey(@NonNull String key);
    void agreePrivacyAgreement(@NonNull Boolean agree);

    /** The codec used by BdLocationHostBridge. */
    static MessageCodec<Object> getCodec() {
      return BdLocationHostBridgeCodec.INSTANCE;
    }

    /** Sets up an instance of `BdLocationHostBridge` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, BdLocationHostBridge api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.BdLocationHostBridge.getLocationInfo", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<LocationInfo> resultCallback = new Result<LocationInfo>() {
                public void success(LocationInfo result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getLocationInfo(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.BdLocationHostBridge.setIOSKey", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String keyArg = (String)args.get(0);
              if (keyArg == null) {
                throw new NullPointerException("keyArg unexpectedly null.");
              }
              api.setIOSKey(keyArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.BdLocationHostBridge.agreePrivacyAgreement", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Boolean agreeArg = (Boolean)args.get(0);
              if (agreeArg == null) {
                throw new NullPointerException("agreeArg unexpectedly null.");
              }
              api.agreePrivacyAgreement(agreeArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
